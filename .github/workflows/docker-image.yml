name: Docker Image CI/CD

on:
  push:
    branches: [ "main", "develop" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  WHATSAPP_IMAGE_NAME: ${{ github.repository }}/whatsapp-blast-api

jobs:
  # Job untuk build dan test WhatsApp Backend
  build-whatsapp:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: whatsapp/package-lock.json

    - name: Install dependencies
      working-directory: ./whatsapp
      run: npm ci

    - name: Run tests (if available)
      working-directory: ./whatsapp
      run: |
        if [ -f "package.json" ] && grep -q '"test"' package.json; then
          npm test || echo "No tests found or tests failed"
        else
          echo "No test script found"
        fi

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.WHATSAPP_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push WhatsApp Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./whatsapp
        file: ./whatsapp/Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Job untuk security scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: [build-whatsapp]
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.WHATSAPP_IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Job untuk deployment (opsional)
  deploy:
    runs-on: ubuntu-latest
    needs: [build-whatsapp]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Deploy notification
      run: |
        echo "ðŸš€ Deployment would happen here"
        echo "WhatsApp API Image: ${{ env.REGISTRY }}/${{ env.WHATSAPP_IMAGE_NAME }}:latest"
        echo "Frontend Image: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:latest"
        
    # Uncomment and configure for actual deployment
    # - name: Deploy to production
    #   run: |
    #     # Add your deployment commands here
    #     # For example, using docker-compose:
    #     # docker-compose -f docker-compose.prod.yml pull
    #     # docker-compose -f docker-compose.prod.yml up -d

  # Job untuk cleanup old images
  cleanup:
    runs-on: ubuntu-latest
    needs: [build-whatsapp]
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Delete old container images
      uses: actions/delete-package-versions@v5
      with:
        package-name: ${{ env.WHATSAPP_IMAGE_NAME }}
        package-type: 'container'
        min-versions-to-keep: 5
        delete-only-untagged-versions: true
